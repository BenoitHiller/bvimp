#!/bin/bash

set -f

source "json.bash"

declare -r REPOSITORY_REGEX='^([a-zA-Z0-9_-]+)/([a-zA-Z0-9_.-]+)$'
declare -r NAME_REGEX='^[a-zA-Z0-9_.-]+$'
declare -r NUMBER_REGEX='^0|[1-9][0-9]*$'
declare BVIMP_HOME="$HOME/.vim/pack/bvimp"

getLocalPackageData() {
  local LOCAL="${LOCAL-false}"
  local user
  local repository
  local -A potentialRepos
  local -a order
  for package in "$@"; do
    if "$interactive" && [[ "$package" =~ $NAME_REGEX ]]; then
      if "$LOCAL"; then
        order=( $(git config --file "$BVIMP_HOME/.gitmodules" --get-regexp "/$package"'@[^@\/]+.path$'  | awk '{print gensub(/^start\/([^@]+)@(.*)/, "\\2/\\1", 1, $2)}') )
        if [[ "${#order[@]}" -gt 0 ]]; then
          while true; do
            printf "Found multiple packages for: %s\n" "$package" >&2
            for ((i=0; i < ${#order[@]}; i++)); do
              printf "\t%d: %s\n" "$i" "${order[$i]}" >&2
            done
            printf "Choose an option [0-%d,s,q](default: 0): " "${#order[@]}" >&2
            if read -r response; then
              if [[ -z "$response" ]]; then
                package="${order[0]}"
                break
              elif [[ "$response" == "s" ]]; then
                continue 2
              elif [[ "$response" == "q" ]]; then
                return 1
              elif [[ "$response" =~ $NUMBER_REGEX ]]; then
                package="${order[$response]}"
              fi
            else
              continue 2
            fi
          done
        else
          invalidPackages["$package"]="No packages found with the name"
          continue
        fi

      else
        potentialRepos=() 
        order=()
        bvimp_findRepos potentialRepos order "$package"
        if [[ "${#order[@]}" -gt 0 ]]; then
          while true; do
            printf "Found multiple packages for: %s\n" "$package" >&2
            for ((i=0; i < ${#order[@]}; i++)); do
              printf "\t%d: %s\n" "$i" "${potentialRepos[${order[$i]}]}" >&2
            done
            printf "Choose an option [0-%d,s,q](default: 0): " "${#order[@]}" >&2
            if read -r response; then
              if [[ -z "$response" ]]; then
                package="${order[0]}"
                break
              elif [[ "$response" == "s" ]]; then
                continue 2
              elif [[ "$response" == "q" ]]; then
                return 1
              elif [[ "$response" =~ $NUMBER_REGEX ]]; then
                package="${order[$response]}"
              fi
            else
              continue 2
            fi
          done
        else
          invalidPackages["$package"]="No packages found with the name"
          continue
        fi
      fi
    fi

    if [[ -z "${packageStrings[$package]+_}" ]]; then
      if [[ "$package" =~ $REPOSITORY_REGEX ]]; then
        user="${BASH_REMATCH[1]}"
        repository="${BASH_REMATCH[2]}"
        packageStrings["$package"]="$repository@$user"
      else
        invalidPackages["$package"]="Invalid Package specified"
      fi
    fi
  done
}

validatePackageData() {
  for package in "${!invalidPackages[@]}"; do
    printf "%s: %s\n" "${invalidPackages[$package]}" "$package" >&2
  done

  if [[ "${#invalidPackages[@]}" -gt 0 ]]; then
    printf "No packages modified\n" >&2
    return 1
  fi
}

checkInstall() {
  (
    set -e
    cd "$BVIMP_HOME"
    git=$(git rev-parse --git-dir)
    [[ "$git" == ".git" ]]
  ) 
  local ret="$?"
  if [[ "$ret" != 0 ]]; then
    printf "Error: you have not initialized bvimp. Call \`bvimp init\` to fix this.\n" >&2
  fi
  return $ret
}

bvimp_init() {
  {
    mkdir -p "$BVIMP_HOME"
    (
      cd "$BVIMP_HOME"
      git init
    )
  }
}

bvimp_add() {
  local -A queryResults
  local tmpFile
  local code
  local repoName
  local repoPath
  for target in "${!packageStrings[@]}"; do
    queryResults=()
    tmpFile="$(mktemp -t 'bvimp.XXXX.json')"
    code="$(curl -s -w '%{http_code}' -o "$tmpFile" "https://api.github.com/repos/$target")"

    if [[ "$code" == 200 ]]; then
      repoName="${packageStrings[$target]}"
      repoPath="start/$repoName"
      parseJson queryResults <"$tmpFile" 
      rm "$tmpFile"
      if [[ -d "$BVIMP_HOME/$repoPath" ]]; then
        # TODO desired behaviour is probably update
        printf "Package named %s already exists\n" "$target" >&2
        return 1
      fi
      printf "Installing package: %s\n" "$target" >&2
      (
        cd "$BVIMP_HOME"
        # TODO this can fail...
        git submodule add "${queryResults[./clone_url]}" "$repoPath"
        git add "$repoPath" .gitmodules
        git commit -q -m "Adding $repoName" 
      )
    elif [[ "$code" == 404 ]]; then
      printf "Package not found: %s\n" "$target" >&2
      rm "$tmpFile"
      return 1
    fi
  done
}

bvimp_remove() {
  local repoName
  local repoPath
  for target in "${!packageStrings[@]}"; do
    printf "Removing package: %s\n" "$target" >&2
    repoName="${packageStrings[$target]}"
    repoPath="start/$repoName"
    if [[ ! -d "$BVIMP_HOME/$repoPath" ]]; then
      printf "Package not found: %s\n" "$target" >&2
      return 1
    fi
    (
      cd "$BVIMP_HOME"
      # TODO this can fail...
      git submodule deinit "$repoPath"
      git rm "$repoPath"
      git commit -q -m "Removing $repoName" 
      rm -rf ".git/modules/$repoPath"
    )
  done
}

bvimp_update() {
  (
    cd "$BVIMP_HOME"
    # TODO this can fail...
    git submodule update --remote --merge
    git commit -a -q -m "Updating packages" 
  )
  
}

bvimp_list() {
  git config --file "$BVIMP_HOME/.gitmodules" --get-regexp url\$ \
    | awk '{ printf("%s\t%s\n", gensub(/.*\/([^\/@]+)@([^\/@]+)\.url$/, "\\2/\\1", 1, $1), $2) }'
}

# Searches for repositories with the exact name specified
#
# Assumes that the specified repository is valid.
bvimp_findRepos() {
  local -n _results="$1"
  local -n _order="$2"
  local -r repository="$3"

  local name
  local infoString
  local -A queryResults=()

  tmpFile="$(mktemp -t 'bvimp.XXXX.json')"
  code="$(curl -s -w '%{http_code}' -o "$tmpFile" "https://api.github.com/search/repositories?q=$repository+in:name")"
  parseJson queryResults <"$tmpFile" 
  rm "$tmpFile"
  if [[ "$code" == 200 ]]; then
    local -i items="${queryResults[./items/\#]}"
    for ((i=0; i < items; i++)); do
      if [[ "${queryResults[./items/$i/name]}" == "$repository" ]]; then
        name="${queryResults[./items/$i/full_name]}"
        printf -v infoString "%s (%d stars)" "$name" "${queryResults[./items/$i/stargazers_count]}"
        _results["$name"]="$infoString"
        _order+=( "$name" )
      fi
    done
  else
    return 1
  fi
}

bvimp_find() {
  local -r repository="$1"
  if [[ "$repository" =~ $NAME_REGEX ]]; then
    local -A potentialRepos
    local -a order
    
    bvimp_findRepos potentialRepos order "$repository"
    for name in "${order[@]}"; do
      printf "%s\n" "${potentialRepos[$name]}"
    done
  else
    printf "Invalid repository name: %s\n" "$repository" >&2
    return 1
  fi
}

main() {
  local -A packageStrings
  local -A invalidPackages
  local interactive
  if [[ -t 1 ]]; then
    interactive=true
  else
    interactive=false
  fi
  if [[ "$#" -gt 0 ]]; then
    # TODO command parsing
    #
    # The final architecture of this program should be something that separates
    # the components of command parsing, querying metadata, and actually
    # modifying the filesystem.
    #
    # First compile all of the passed parameters into a list of packages. Then
    # determine the current state of those packages, as well as their full
    # names and clone urls. Then finally use dumb update methods that just add,
    # remove, and update submodules using source and destination parameters.
    local command="$1"
    case "$command" in
      add)
        checkInstall || exit 1
        shift
        getLocalPackageData "$@"
        [[ $? == 0 ]] || exit 1
        validatePackageData || exit 1
        bvimp_add
        ;;
      remove)
        checkInstall || exit 1
        shift
        LOCAL=true getLocalPackageData "$@"
        [[ $? == 0 ]] || exit 1
        validatePackageData || exit 1
        bvimp_remove
        ;;
      update)
        # TODO single package update
        checkInstall || exit 1
        bvimp_update
        ;;
      list)
        checkInstall || exit 1
        bvimp_list
        ;;
      find)
        shift
        bvimp_find "$1"
        ;;
      init)
        bvimp_init
        ;;
      *)
        printf "Command not found: %s\n" "$command" >&2
        ;;
    esac
    return "$?"
  else
    printf "TODO help\n" >&2
  fi
}

main "$@"
